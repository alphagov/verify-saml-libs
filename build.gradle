buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            mavenCentral()
        }
        else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

ext {
    opensaml_version = "3.4.3"
    dropwizard_version = "1.3.22"
    ida_utils_version = "394"
    build_version = "$opensaml_version-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}

apply from: 'publish.gradle'

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'java'

    group = "uk.gov.ida"
    version = "$build_version"
}

repositories {
    mavenCentral()
}

subprojects {
    configurations.all {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }
            mavenCentral()
        }
        else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }

    configurations {
        slf4j
        jaxb
        guice
        opensaml
        dropwizard
        xml_utils
        test_deps
        security
    }

    dependencies {
        slf4j 'org.slf4j:slf4j-api:1.7.26'

        jaxb 'javax.xml.bind:jaxb-api:2.3.1'

        guice 'com.google.guava:guava:28.0-jre',
                'com.google.inject:guice:4.0'

        dropwizard "io.dropwizard:dropwizard-core:$dropwizard_version",
                "io.dropwizard:dropwizard-client:$dropwizard_version",
                "io.dropwizard:dropwizard-jackson:$dropwizard_version"

        opensaml "org.opensaml:opensaml-core:$opensaml_version",
                "org.opensaml:opensaml-saml-impl:$opensaml_version",
                "org.opensaml:opensaml-xmlsec-api:$opensaml_version",
                "org.opensaml:opensaml-security-api:$opensaml_version",
                "org.opensaml:opensaml-saml-api:$opensaml_version",
                "org.opensaml:opensaml-xmlsec-impl:$opensaml_version",
                "org.opensaml:xmltooling:1.4.4",
                'net.shibboleth.utilities:java-support:7.5.0'

        security 'com.nimbusds:nimbus-jose-jwt:7.3',
                "uk.gov.ida:security-utils:2.0.0-$ida_utils_version"

        test_deps   'uk.gov.ida:common-test-utils:2.0.0-64',
                    'com.github.tomakehurst:wiremock-standalone:2.23.2',
                    "io.dropwizard:dropwizard-testing:$dropwizard_version",
                    'org.hamcrest:hamcrest-library:2.2',
                    'org.assertj:assertj-joda-time:2.2.0',
                    'org.assertj:assertj-core:3.14.0',
                    'org.junit.jupiter:junit-jupiter-api:5.5.2',
                    'uk.gov.ida:verify-dev-pki:2.0.0-45',
                    'org.mockito:mockito-core:3.2.0'

        xml_utils "uk.gov.ida:common-utils:2.0.0-$ida_utils_version"
    }
}

task jacocoMerge(type: JacocoMerge) {
    destinationFile = file("$buildDir/jacoco/allTestCoverage.exec")
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/*est.exec')
    jacocoClasspath = project.files(project.configurations.jacocoAnt)
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn jacocoMerge

    additionalSourceDirs files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalClassDirs files(subprojects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData files(executionData.findAll { it.exists() })
    }
}
